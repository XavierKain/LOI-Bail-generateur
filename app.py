"""
Interface Streamlit pour la g√©n√©ration automatique de documents LOI.
"""

import streamlit as st
import logging
from pathlib import Path
from modules import ExcelParser, LOIGenerator
import traceback

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Configuration de la page
st.set_page_config(
    page_title="G√©n√©rateur de LOI",
    page_icon="üìÑ",
    layout="wide"
)

# Titre de l'application
st.title("üìÑ G√©n√©rateur automatique de Lettres d'Intention (LOI)")
st.markdown("---")

# Description
st.markdown("""
Cette application g√©n√®re automatiquement des documents LOI (Lettres d'Intention) pour des baux commerciaux.

### Comment √ßa marche ?
1. **Uploadez** votre fichier Excel (Fiche de d√©cision)
2. **V√©rifiez** les donn√©es extraites
3. **G√©n√©rez** le document LOI
4. **T√©l√©chargez** le fichier DOCX g√©n√©r√©
""")

st.markdown("---")

# V√©rifier que les fichiers n√©cessaires existent
config_path = Path("R√©daction LOI.xlsx")
template_path = Path("Template LOI avec placeholder.docx")

if not config_path.exists():
    st.error(f"‚ùå Fichier de configuration manquant: {config_path}")
    st.stop()

if not template_path.exists():
    st.error(f"‚ùå Template manquant: {template_path}")
    st.stop()

# Upload du fichier Excel
st.header("1. Upload du fichier Excel")
uploaded_file = st.file_uploader(
    "Choisissez votre fichier Excel (Fiche de d√©cision)",
    type=["xlsx", "xls"],
    help="Uploadez le fichier Excel contenant les donn√©es pour la LOI"
)

if uploaded_file is not None:
    try:
        # Sauvegarder temporairement le fichier
        temp_path = Path("temp_uploaded.xlsx")
        with open(temp_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        st.success(f"‚úÖ Fichier charg√©: {uploaded_file.name}")

        # Extraire les donn√©es
        with st.spinner("Extraction des donn√©es..."):
            parser = ExcelParser(str(temp_path), str(config_path))
            variables = parser.extract_variables()
            societes_info = parser.extract_societe_info()
            output_filename = parser.get_output_filename(variables)

        st.success(f"‚úÖ {len(variables)} variables extraites")

        # Afficher les donn√©es extraites
        st.header("2. Donn√©es extraites")

        # Informations principales
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("Nom Preneur", variables.get("Nom Preneur", "Non d√©fini"))
            st.metric("Soci√©t√© Bailleur", variables.get("Soci√©t√© Bailleur", "Non d√©fini"))

        with col2:
            st.metric("Date LOI", variables.get("Date LOI", "Non d√©fini"))
            st.metric("Montant du loyer", variables.get("Montant du loyer", "Non d√©fini") + " ‚Ç¨")

        with col3:
            st.metric("Dur√©e Bail", variables.get("Dur√©e Bail", "Non d√©fini") + " ans")
            st.metric("Enseigne", variables.get("Enseigne", "Non d√©fini"))

        # D√©tails complets
        with st.expander("üìã Voir toutes les variables extraites"):
            # Filtrer les variables sp√©ciales (formules, descriptions)
            display_vars = {
                k: v for k, v in variables.items()
                if not k.startswith("_")
            }

            # Trier par ordre alphab√©tique
            sorted_vars = dict(sorted(display_vars.items()))

            # Afficher dans un tableau
            for key, value in sorted_vars.items():
                col1, col2 = st.columns([1, 2])
                with col1:
                    st.markdown(f"**{key}**")
                with col2:
                    if value:
                        st.text(value)
                    else:
                        st.markdown("*Non d√©fini*")

        st.markdown("---")

        # G√©n√©ration du document
        st.header("3. G√©n√©ration du document LOI")

        if st.button("üöÄ G√©n√©rer le document LOI", type="primary", use_container_width=True):
            try:
                with st.spinner("G√©n√©ration en cours..."):
                    # Cr√©er le g√©n√©rateur
                    generator = LOIGenerator(variables, societes_info, str(template_path))

                    # G√©n√©rer le document
                    output_path = Path("output") / output_filename
                    generated_path = generator.generate(str(output_path))

                st.success(f"‚úÖ Document g√©n√©r√© avec succ√®s!")

                # T√©l√©chargement
                st.header("4. T√©l√©chargement")

                with open(generated_path, "rb") as f:
                    st.download_button(
                        label="üì• T√©l√©charger le document LOI",
                        data=f,
                        file_name=output_filename,
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        use_container_width=True
                    )

                st.info(f"üìÅ Fichier √©galement sauvegard√© dans: `{generated_path}`")

                # Informations sur les placeholders
                with st.expander("‚ÑπÔ∏è Informations importantes"):
                    st.markdown("""
                    ### Finalisation du document

                    Le document g√©n√©r√© peut contenir des placeholders en **rouge** qui indiquent des donn√©es manquantes.
                    Ces placeholders doivent √™tre compl√©t√©s manuellement dans le document Word.

                    ### Sections optionnelles

                    Les sections optionnelles (ex: paliers ann√©es 4-6) sont automatiquement supprim√©es si elles n'ont pas de donn√©es.

                    ### Prochaines √©tapes

                    1. Ouvrez le document DOCX g√©n√©r√©
                    2. V√©rifiez que toutes les donn√©es sont correctes
                    3. Compl√©tez les placeholders en rouge (si pr√©sents)
                    4. Exportez en PDF si n√©cessaire
                    """)

            except Exception as e:
                st.error(f"‚ùå Erreur lors de la g√©n√©ration: {str(e)}")
                logger.error(f"Erreur g√©n√©ration: {traceback.format_exc()}")

                with st.expander("D√©tails de l'erreur"):
                    st.code(traceback.format_exc())

        # Nettoyage
        if temp_path.exists():
            temp_path.unlink()

    except Exception as e:
        st.error(f"‚ùå Erreur lors du traitement du fichier: {str(e)}")
        logger.error(f"Erreur traitement: {traceback.format_exc()}")

        with st.expander("D√©tails de l'erreur"):
            st.code(traceback.format_exc())

else:
    st.info("üëÜ Uploadez un fichier Excel pour commencer")

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: gray; padding: 20px;'>
    <p>G√©n√©rateur automatique de LOI v2.0</p>
    <p>D√©velopp√© pour Forgeot Property</p>
</div>
""", unsafe_allow_html=True)
